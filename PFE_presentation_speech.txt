# 10-Minute Presentation Speech Script
# Licenseer: A Knowledge Graph and LLM-based Framework for License Compatibility

## Slide 1: Title Slide (30 seconds)
Hello everyone. I'm Ilyes Ben Khalifa, and with my colleague Montassar Ben Messaoud, we're presenting our PFE project: "A Knowledge Graph and LLM-based Framework for License Compatibility Detection." 
Our system is called Licenseer, and it solves an important problem in software development.


## Slide 2: Motivation (1 minute)
Let me start with the problem. Today's software heavily uses open-source components. Projects often include dozens or hundreds of third-party libraries, each with its own license. Studies show that about 73% of open-source projects
 have some kind of license conflict.


These conflicts cause serious problems: legal issues from breaking license rules, restrictions on sharing software, and the challenge of tracking and managing license requirements.

Current methods can't keep up because there are over 200 different licenses, many with specific version differences, and new licenses keep appearing.

## Slide 3: Current Approaches & Limitations (1 minute)
Several tools try to address this, including scanners like Ninka, FOSSology, and ScanCode. The most advanced system, LiDetector, uses text analysis techniques.

But these tools have big limitations. LiDetector only covers 23 license terms and doesn't handle custom licenses well. It gives poor explanations with few references to actual license text. It needs complete retraining to add new 
licenses, processes licenses one by one instead of understanding relationships, and can't adapt to new licensing concepts.


## Slide 4: Our Approach (1 minute)
Our solution, Licenseer, combines three technologies: Knowledge Graphs, Large Language Models, and Retrieval-Augmented Generation.

As shown in this diagram, our Knowledge Graph stores licenses and relationships in a Neo4j database. The LLM Parser extracts key information from custom licenses. The RAG module pulls relevant text to support explanations.

This design lets us handle complex relationships, add new licenses without retraining, and provide detailed explanations with citations.


## Slide 5: Knowledge Graph Construction (1 minute)
At the core of our system is a Knowledge Graph that models the license ecosystem. Unlike flat databases, our graph directly shows the connections between elements.

The graph includes license nodes (MIT, GPL, Apache), dependencies linked to licenses, and license terms with relationship types like REQUIRES, PROHIBITS, and PERMITS.

As shown in the table, licenses connect to other licenses through compatibility relationships, and to terms through requirements. This structure makes it easy to check compatibility and allows more complex reasoning than rule-based 
systems.


## Slide 6: LLM-driven License Parsing (1 minute) 
For custom licenses, we use an LLM-based parser. Our system collects license texts and uses GPT-4 to extract key information:

The LLM identifies what users MUST do, what they CANNOT do, what they CAN do, and any version-specific details.

This information is added directly to our knowledge graph, letting the system stay current with new licenses without retraining. This is especially useful for organizations with custom licenses or for analyzing proprietary dependencies.


## Slide 7: RAG for Explainability (1 minute)
Clear explanations are critical for license compliance. Our RAG (Retrieval-Augmented Generation) system:

First, indexes official license texts. When someone asks about compatibility, the system retrieves the most relevant parts of the license texts. Then it generates explanations that include direct quotes from these documents.

This approach ensures accurate and verifiable explanations, with an average of 2.6 citations per explanation—much better than LiDetector's 0.8 citations. These detailed explanations help developers understand exactly why licenses 
are compatible or not.


## Slide 8: CI/CD Integration (1 minute)
A key benefit of our system is how it fits into development workflows. Licenseer can be added to CI/CD pipelines to constantly check license compatibility.

Here's how it works: A developer adds new dependencies. During the build process, Licenseer checks all license relationships. If there are conflicts, the system alerts developers early, before problematic dependencies become 
deeply embedded in the code.

Our system has a 94% success rate in finding potential license conflicts before they reach production.


## Slide 9: Performance Results (1 minute)
We tested our system against LiDetector on 2,000 open-source projects. As the chart shows, our approach performed better in all key areas.

We achieved 97.4% license detection accuracy—4.2% better than LiDetector. Our conflict detection score was 94.6%—5.9% better. We reduced false positives by nearly half, from 10.1% to 5.3%. 

Most importantly, our framework achieved a 92% regulatory compliance score compared to LiDetector's 65%, directly addressing a major gap in existing tools.


## Slide 10: Case Study (1 minute)
Let's look at a real example: analyzing compatibility between Elasticsearch (Elastic License) and Lucene (Apache 2.0).

LiDetector spots usage restrictions in the Elastic License and identifies Apache 2.0 terms. It flags a potential conflict but doesn't provide context or a detailed explanation.

Our system distinguishes between different versions of the Elastic License, retrieves specific sections like 4.2 through RAG, provides exact quotes from both licenses, and suggests alternatives for compliance. This helps 
developers make informed decisions.


## Slide 11: Conclusion & Future Work (1 minute)
In conclusion, our framework offers significant improvements for license compatibility detection. Key achievements include 97.4% license detection accuracy, 71% reduction in memory usage, and 7x faster license updates—reducing 
update time from 7 days to just 24 hours.

Future research directions include specialized extensions for sectors like healthcare or automotive software, combining license text analysis with code scanning, tracking license changes over time, and developing specialized LLMs 
for license analysis.

Our solution reduces legal risks and compliance overhead for all types of software projects, supporting better software engineering practices.

Thank you. I'm happy to answer any questions. 